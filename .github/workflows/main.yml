name: build-push-deploy

on:
  push:
    branches:
      - "master"
      - "develop"

env:
  IMAGE_NAME_INFERENCE: philippzagar/ncm-inference
  IMAGE_NAME_SERVER: philippzagar/ncm-server
  IMAGE_NAME_NCM: philippzagar/ncm-debian

jobs:
  build-push-inference:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client
        uses: docker/build-push-action@v3
        with:
          context: project/inference_pipeline/inference
          tags: ${{ env.IMAGE_NAME_INFERENCE }}
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_INFERENCE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_INFERENCE }}:buildcache,mode=max

  build-push-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        uses: docker/build-push-action@v3
        with:
          context: project/inference_pipeline/server
          tags: ${{ env.IMAGE_NAME_SERVER }}
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_SERVER }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_SERVER }}:buildcache,mode=max

  build-push-ncm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push NCM
        uses: docker/build-push-action@v3
        with:
          context: project/moep80211ncm
          tags: ${{ env.IMAGE_NAME_NCM }}
          push: true
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_NCM }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_NCM }}:buildcache,mode=max

  deploy-1:
    runs-on: ubuntu-latest
    needs: [build-push-inference, build-push-server, build-push-ncm]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT1 }}
          source: "project/docker-compose.yml"
          target: "/home/philipp/ncm/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT1 }}
          script: |
            cd /home/philipp/ncm/project
            docker compose down
            docker compose pull
            docker compose up -d

  deploy-2:
    runs-on: ubuntu-latest
    needs: [build-push-inference, build-push-server, build-push-ncm]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT2 }}
          source: "project/docker-compose.yml"
          target: "/home/philipp/ncm/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT2 }}
          script: |
            cd /home/philipp/ncm/project
            docker compose down
            docker compose pull
            docker compose up -d

  start-libmoep:
    runs-on: ubuntu-latest
    needs: [deploy-1, deploy-2]
    steps:
      - name: Start Libmoep Master
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT1 }}
          # Add -l 10111 to the command below in order to execute the LQE (with socket pushing etc.)
          # "&" at the end so that it releases the terminal (so the pipeline job immediatly)
          script: |
            docker exec -i ncm-debian sh -c "./ncm wlp1s0 2412M -i 10.0.1.32 -hht40+ -r 0 &"
      - name: Start Libmoep Slave
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT2 }}
          # Add -l 10222 to the command below in order to execute the LQE (with socket pushing etc.)
          # "&" at the end so that it releases the terminal (so the pipeline job immediatly)
          script: |
            docker exec -i ncm-debian sh -c "./ncm wlp1s0 2412M -i 10.0.1.9 -hht40+ -r 0 &"

  start-ping:
    runs-on: ubuntu-latest
    needs: [start-libmoep]
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Start Ping
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT1 }}
          script: |
            ping -s 1200 -t 10.0.1.9 &
